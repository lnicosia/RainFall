Sur cet exo il faut un peu plus de temps pour décortiquer le code
On a 3 buffers, un dans le main et 2 dans p(). Le programme demande 2 inputs l'un après l'autre.
Ils sont copiés respectivement dans les 2 buffers de p(). La copie est protégée, 20 bytes seulement,
cependant avant de copier le programme cherche et remplace le premier '\n' de chaque input par un '\0'.
Cette partie est importante, car après avoir copié les 2 inputs dans leur buffer de 20 bytes, le programme
strcpy le premier puis strcat le second dans le buffer du main.
Si les inputs ne contiennent pas de '\n' dans les 20 premiers chars, les buffers ne contiendront donc
pas de '\0' et le strcpy et le strcat ne vont pas s'arrêter à la fin prévue des buffers (20 bytes).
Ils vont continuer de copier jusqu'au premier '\0' présent dans le mémoire, ce qui est plus ou moins aléatoire

On overflow le buffer du main en mettant + de 20 chars dans chaque entrée. Il faut tout de même mettre
un '\n' derrière sinon l'instruction après le strchr crash.
Attention ici il faut utiliser python carl perl fait n'importe quoi sur les 2 inputs successifs
On constate que si la première chaîne est remplie de A,
quelques octets de plus seulement vont être strcpy car un 0 est présent peu après dans la mémoire. 
Plutôt que de compter exactement et de me prendre la tête, je fais des tests pour voir jusqu'où le buffer
est overflow. On voit qu'il est assez simple d'aller jusqu'à la sauvegarde d'eip du main.
Après quelques essais, je trouve les bonnes valeurs pour overflow exactement jusqu'à cet endroit:
20 char pour le premier input et 14 pour le 2e. A cause du strcpy + strcat, les données sont copiées 2x.
Il faut donc rajouter un caractère avant l'adresse pour tomber pile où on veut.
On a ensuite plus qu'à écrire une adresse qui nous intéresse.
Ici le plus simple est de mettre notre shellcode habituel précédé de NOPs dans l'env et de faire
retourner le main au milieu de ces NOPs.
On exporte notre shellcode ainsi:
export SHELLCODE=$(python -c 'print "\x90"*200 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"')
Ensuite pour trouver l'env pendant l'execution
x/s *((char**)environ). Ne pas oublier de rajouter 10 a l'adresse pour passer le "SHELLCODE=" puis ajouter 100
pour se placer au milieu des NOPs.
Cela nous donne en gardant stdin ouvert:
cat <(python -c 'print "A"*20'; python -c 'print "B"*14 + "A\xbf\xff\xf8\x78"[::-1]') - | ./bonus0
